{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SMU grupo 3","text":"<p>Descri\u00e7\u00e3o do Projeto: Sistema de Simula\u00e7\u00e3o de Entrega de Caminh\u00f5es com Algoritmo ACO e JADE</p>"},{"location":"#objetivo","title":"Objetivo","text":"<p>Este projeto tem como objetivo desenvolver uma simula\u00e7\u00e3o para otimizar o processo de entrega de caminh\u00f5es em um cen\u00e1rio log\u00edstico utilizando sistemas multiagentes. A principal abordagem utilizada \u00e9 o Ant Colony Optimization (ACO), um algoritmo inspirado no comportamento de formigas para resolver problemas de otimiza\u00e7\u00e3o, especialmente para o c\u00e1lculo de rotas em problemas de roteiriza\u00e7\u00e3o de ve\u00edculos (VRP, do ingl\u00eas Vehicle Routing Problem).</p> <p>A aplica\u00e7\u00e3o foi desenvolvida em Java, utilizando a plataforma JADE (Java Agent Development Framework), que facilita a constru\u00e7\u00e3o de sistemas baseados em agentes aut\u00f4nomos. No projeto, cada agente representa um caminh\u00e3o e suas intera\u00e7\u00f5es com o ambiente (clientes, dep\u00f3sitos, etc.) s\u00e3o modeladas para realizar entregas de maneira eficiente, buscando minimizar custos com o tempo e dist\u00e2ncia percorrida.</p> <p>Funcionalidades Simula\u00e7\u00e3o de rotas de entrega:  \u00a0 O sistema simula o processo de entrega de caminh\u00f5es, levando em considera\u00e7\u00e3o diversos fatores como a localiza\u00e7\u00e3o dos clientes e dep\u00f3sitos, restri\u00e7\u00f5es de capacidade dos caminh\u00f5es e hor\u00e1rios de entrega.   Algoritmo ACO: \u00a0 O algoritmo ACO \u00e9 aplicado para encontrar as melhores rotas para os caminh\u00f5es, levando em considera\u00e7\u00e3o m\u00faltiplos objetivos como tempo de viagem e minimiza\u00e7\u00e3o de custos operacionais. Plataforma JADE: Utiliza\u00e7\u00e3o da plataforma JADE para modelagem e gerenciamento dos agentes que simulam as entregas, permitindo a comunica\u00e7\u00e3o e intera\u00e7\u00e3o entre eles de forma distribu\u00edda e eficiente.</p> <p>Objetivos: Efici\u00eancia nas rotas de entrega: \u00a0 Minimizar o tempo e o custo das rotas de entrega, utilizando a t\u00e9cnica ACO para encontrar solu\u00e7\u00f5es de otimiza\u00e7\u00e3o.  Escalabilidade: \u00a0 Permitir que o sistema se adapte a diferentes cen\u00e1rios, desde opera\u00e7\u00f5es pequenas at\u00e9 grandes redes log\u00edsticas. Monitoramento em tempo real: Acompanhamento da movimenta\u00e7\u00e3o dos caminh\u00f5es e do desempenho do sistema ao longo da simula\u00e7\u00e3o, possibilitando ajustes em tempo real. Este projeto \u00e9 uma aplica\u00e7\u00e3o pr\u00e1tica da intelig\u00eancia artificial em sistemas log\u00edsticos, com grande potencial para otimizar opera\u00e7\u00f5es de transporte e entrega, contribuindo para um gerenciamento mais eficiente e reduzindo custos operacionais.</p>"},{"location":"about/","title":"Sobre","text":""},{"location":"about/#sobre-os-integrantes","title":"Sobre os integrantes","text":"<p>Douglas da Silva: estudante de Engenharia de Software , Java.</p> <p>Mateus Bastos: estudante de Engenharia de Software entusiasta da programa\u00e7\u00e3o procedural.</p> <p>Kathlyn Lara Murussi: estudante de Engenharia de Software e apaixonado por programa\u00e7\u00e3o.</p> <p>Rodrigo Santos: estudante de Engenharia de Software e apaixonado por programa\u00e7\u00e3o.</p> <p> Douglas Monteles Mateus Bastos Lara Murussi Rodrigo Santos <p></p>"},{"location":"guia/","title":"Guia de instala\u00e7\u00e3o","text":""},{"location":"guia/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Linguagens: Java e Javascript Tecnologias: Java, Javascript, HTML5, CSS3, JADE, Spring boot, Makefile</p>"},{"location":"guia/#pre-requisitos-para-rodar-o-projeto","title":"Pr\u00e9-requisitos para rodar o projeto","text":"<ul> <li>Possuir instalado o JDK 21</li> </ul>"},{"location":"guia/#uso","title":"Uso","text":"<p>Recomenda-se o uso do sistema operacional Linux ou alguma distribui\u00e7\u00e3o baseada no linux.</p> <ol> <li>clone o reposit\u00f3rio: </li> <li>ssh: <code>git@github.com:UnBSMA2024-2/2024.1_Grupo03_SMA_Comportamental.git</code></li> <li>http: <code>https://github.com/UnBSMA2024-2/2024.1_Grupo03_SMA_Comportamental.git</code></li> <li>Entre no diret\u00f3rio: <code>2024.1_Grupo03_SMA_Comportamental</code></li> <li>Baixe as depend\u00eancias e gere a build do projeto com: <code>make build</code></li> </ol> <p></p> <ol> <li>Execute o projeto com: <code>make up</code></li> <li> <p>Ao executar esse comando, a tela do Jade Remote Agent Management deve abrir como na imagem abaixo:</p> <p></p> </li> <li> <p>Adicionalmente, um servidor web tamb\u00e9m foi iniciado e pode ser acessado via: http://localhost:8080</p> </li> <li>Para parar a execu\u00e7\u00e3o do projeto, rode o comando: <code>make down</code></li> <li>Esse comando exige usu\u00e1rio <code>sudo</code></li> <li>Adicionalmente, para gerar a build e executar o projeto, rode o comando <code>make build-up</code></li> </ol>"}]}